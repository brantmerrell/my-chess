=== File: ./config.R ===
# config.R
api_url <- Sys.getenv("API_URL", "http://localhost:8000")



=== File: ./ui.R ===
library(shinythemes)
source("R/globals.R")
ui <- fluidPage(
  theme = shinytheme("superhero"),
  tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
  titlePanel("Ascii Chessboard"),
  verticalLayout(
    mainPanel(
      selectInput("selectedFEN", NULL, c("standard starting position", "lichess daily puzzle", "chess.com daily puzzle"), selectize = FALSE),
      splitLayout(
        cellWidths = c("586px", "auto"),
        textInput("fen", NULL, startFen),
        actionButton("submitFEN", "Submit FEN"),
        cellArgs = list(
          style = "vertical-align: top; border-radius: 5px;"
        ),
        class = "my-split-layout"
      ),
      verbatimTextOutput("board"),
      splitLayout(
        cellWidths = c("130px", "130px", "130px", "130px"),
        cellArgs = list(
          style = "vertical-align: top; overflow: visible;"
        ),
        selectInput("selectedMove", NULL, "", width = "100px", selectize = FALSE),
        textInput("move", NULL, ""),
        actionButton("submitMove", "Submit Move"),
        actionButton("undo", "Undo Move"),
        class = "my-split-layout"
      ),
      h3("Helper Visual"),
      selectInput("selectedVisual", NULL,
        c(
          "No Visual Selected", "FEN description", "FEN map", "Link List",
          "Diagon Links", "History Table", "Plot View"
        ),
        selectize = FALSE
      ),
      uiOutput("dynamicOutput")
    )
  )
)



=== File: ./tests/testthat/test_fen_description.R ===
context("Testing fen_description function")
source("../../R/fen_description.R")

test_that("fen_description produces correct concise and verbose descriptions", {
  # Load expected outcomes from files
  path <- system.file("testdata", package = "myRpackage")
  concise_standard <- readLines("../../testdata/StandardSetupFEN-concise.txt")
  verbose_standard <- readLines("../../testdata/StandardSetupFEN-verbose.txt")

  # Example test
  expect_equal(fen_description("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", verbose_ranks = TRUE), verbose_standard)
  expect_equal(fen_description("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"), concise_standard)
})



=== File: ./tests/RUnit/test_fen_description.R ===
library(RUnit)
source("R/fen_description.R")

test.fen_description <- function() {
  concise_standard <- readLines(file.path("testdata/StandardSetupFEN-concise.txt"))
  verbose_standard <- readLines(file.path("testdata/StandardSetupFEN-verbose.txt"))

  checkEquals(fen_description("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"), concise_standard)
  checkEquals(fen_description("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", verbose_ranks = TRUE), verbose_standard)
}



=== File: ./R/getLiChessPuzzle.R ===
library(httr)
library(magrittr)

getLiChessPuzzle <- function(link = "https://lichess.org/api/puzzle/daily") {
  content <- GET(link) %>%
    content()
  if (is.null(content)) {
    startFen <- "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
    showNotification("Error retrieving puzzle. Defaulting to standard starting position.")
    return(startFen)
  }
  pgn <- strsplit(content$game$pgn, " ")[[1]]
  initialPly <- content$puzzle$initialPly
  game <- game()
  for (move in pgn[1:(initialPly + 1)]) {
    game <- game %>% move(move)
  }
  return(fen(game))
}



=== File: ./R/asciiPrint.R ===
asciiPrint <- function(asciiLines) {
  borderLine <- "   +-------------------------------+"
  cat(borderLine, "\n")

  for (i in 1:length(asciiLines)) {
    # Create an empty line to be populated with characters and spaces
    spacedLine <- ""

    for (j in 1:nchar(asciiLines[i])) {
      char <- substr(asciiLines[i], j, j)
      spacedLine <- paste0(spacedLine, char, " ")
    }

    cat(paste0(" ", 8 - i + 1, " | ", spacedLine, "|"), "\n")
  }
  cat(borderLine, "\n")
  cat("     a   b   c   d   e   f   g   h\n")
}



=== File: ./R/move_history_tracker.R ===
library(reticulate)

move_history_store <- NULL

initialize_move_history <- function(initial_fen = NULL) {
  if (is.null(initial_fen)) {
    initial_fen <- "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
  }

  move_history_store <<- data.frame(
    ply = 0,
    san = NA_character_,
    uci = NA_character_,
    fen = initial_fen,
    stringsAsFactors = FALSE
  )

  return(move_history_store)
}

track_move_history <- function(chess_board = NULL, san_move = NULL) {
  if (is.null(move_history_store)) {
    if (!is.null(chess_board)) {
      initialize_move_history(chess_board$fen())
    } else {
      initialize_move_history()
    }
    return(move_history_store)
  }

  if (is.null(chess_board) || is.null(san_move)) {
    return(move_history_store)
  }

  ply <- nrow(move_history_store)

  move <- chess_board$peek()
  uci_move <- move$uci()

  current_fen <- chess_board$fen()

  new_row <- data.frame(
    ply = ply,
    san = san_move,
    uci = uci_move,
    fen = current_fen,
    stringsAsFactors = FALSE
  )

  move_history_store <<- rbind(move_history_store, new_row)

  return(move_history_store)
}

reset_move_history <- function(initial_fen = NULL) {
  initialize_move_history(initial_fen)
  return(move_history_store)
}

undo_move_history <- function() {
  if (!is.null(move_history_store) && nrow(move_history_store) > 1) {
    move_history_store <<- move_history_store[-nrow(move_history_store), ]
  }
  return(move_history_store)
}



=== File: ./R/renderAsciiSummary.R ===
library(magrittr)
source("R/asciiPrint.R")
source("R/asciiSub.R")
source("chess_utils.R")

renderAsciiSummary <- function(chessObject, patterns = c("\\."), replacements = c(" ")) {
  fen <- chessObject$fen()
  cat(paste("FEN:", fen, "\n"))

  cat("\nBoard:\n")
  boardLines <- chessObject$`__str__`() %>%
    strsplit("\n") %>%
    unlist()

  if (length(patterns) != length(replacements)) {
    stop("patterns and replacements must have the same length")
  }
  for (i in 1:length(patterns)) {
    boardLines <- asciiSub(patterns[i], replacements[i], boardLines)
  }

  boardLines %>% asciiPrint()

  cat(paste("\nTurn:", ifelse(chessObject$turn, "White", "Black"), "\n"))
  # history <- paste(c("History:", getMoveHistorySan(chessObject$move_stack)), collapse = " ")
  # cat(history, "\n")

  cat("\nOptions to move:\n")
  cat(getLegalMovesSan(fen) %>% sort())
  cat("\n")
}



=== File: ./R/fen_description.R ===
fen_description <- function(fen, verbose_ranks = FALSE) {
  fields <- strsplit(fen, " ")[[1]]
  names(fields) <- c("piece_placement", "active_color", "castling_availability", "en_passant_target_square", "halfmove_clock", "fullmove_number")

  ranks <- strsplit(fields["piece_placement"], "/")[[1]]
  names(ranks) <- c("rank_8", "rank_7", "rank_6", "rank_5", "rank_4", "rank_3", "rank_2", "rank_1")

  if (verbose_ranks) {
    ranks <- lapply(ranks, function(rank) {
      extended_rank <- ""
      chars <- unlist(strsplit(rank, ""))
      for (char in chars) {
        if (grepl("^[[:digit:]]$", char)) {
          extended_rank <- paste0(extended_rank, paste0(rep("_", as.numeric(char)), collapse = ""))
        } else {
          extended_rank <- paste0(extended_rank, char)
        }
      }
      extended_rank
    })
  }

  piece_placement_details <- list(
    full = fields["piece_placement"],
    ranks = setNames(as.list(ranks), names(ranks))
  )

  description <- list(
    fen = fen,
    fields = list(
      piece_placement = piece_placement_details,
      active_color = fields["active_color"],
      castling_availability = fields["castling_availability"],
      en_passant_target_square = fields["en_passant_target_square"],
      halfmove_clock = fields["halfmove_clock"],
      fullmove_number = fields["fullmove_number"]
    )
  )

  return(description)
}



=== File: ./R/shift_string.R ===
shift_string <- function(index1, index2) {
  shift_length <- abs(index2 - index1)
  white_space <- paste0(rep(" ", min(index1, index2) - 1), collapse = "")
  center <- paste0(rep("─", shift_length - 2), collapse = "")

  if (index2 > index1) {
    left_end <- "└"
    right_end <- "┐"
  } else {
    left_end <- "┌"
    right_end <- "┘"
  }

  return(paste0(c(white_space, left_end, right_end, center), collapse = ""))
}



=== File: ./R/asciiSub.R ===
asciiSub <- function(patternAscii, replacementAscii, asciiLines) {
  asciiLines <- gsub(asciiLines, pattern = patternAscii, replacement = replacementAscii)
  return(asciiLines)
}



=== File: ./R/sendLinksToGraphDAG.R ===
library(httr)
library(jsonlite)
library(igraph)
source("config.R")

sendLinksToGraphDAG <- function(links) {
  endpoint <- "/graphdag/"
  url <- paste0(api_url, endpoint)

  payload <- list(edges = links$edges)

  response <- PUT(url, body = payload, encode = "json")

  if (http_status(response)$category == "Success") {
    return(content(response, "parsed"))
  } else {
    stop("Failed to send links to /graphdag endpoint")
  }
}



=== File: ./R/populateFEN.R ===
populateFEN <- function(opt) {
  py_chess <- import("chess")
  chessComPuzzle <- "https://api.chess.com/pub/puzzle"
  liChessPuzzle <- "https://lichess.org/api/puzzle/daily"
  if (opt == "standard starting position") {
    return(startFen)
  }
  if (opt == "lichess daily puzzle") {
    content <- GET(liChessPuzzle) %>%
      content()
    if (is.null(content)) {
      showNotification("Error retrieving puzzle. Defaulting to standard starting position.")
      puzzle <- startFen
    }
    pgn <- strsplit(content$game$pgn, " ")[[1]]
    initialPly <- content$puzzle$initialPly
    game <- py_chess$Board()
    for (move in pgn[1:(initialPly + 1)]) {
      game$push_san(move)
    }
    li_chess_state <<- game
    return(game$fen())
  }
  if (opt == "chess.com daily puzzle") {
    tryCatch(
      {
        puzzle <- GET(chessComPuzzle) %>%
          content() %>%
          .$fen
      },
      error = function(e) {
        showNotification("Error retrieving puzzle. Defaulting to standard starting position.")
        puzzle <- startFen
      }
    )
    if (is.null(puzzle)) {
      showNotification("Error retrieving puzzle. Defaulting to standard starting position.")
      puzzle <- startFen
    }
    return(puzzle)
  }
  opt
}



=== File: ./R/char_transpose.R ===
char_transpose <- function(vector_of_strings) {
  char_list <- strsplit(vector_of_strings, "")

  transposed_vector <- sapply(1:nchar(vector_of_strings[1]), function(i) {
    paste(sapply(char_list, `[`, i), collapse = "")
  })

  return(transposed_vector)
}



=== File: ./R/globals.R ===
fen_to_symbol <- list(
  K = "♔", Q = "♕", R = "♖", B = "♗", N = "♘", P = "♙",
  k = "♚", q = "♛", r = "♜", b = "♝", n = "♞", p = "♟︎"
)

sq_files <- list(
  "1" = "a", "2" = "b", "3" = "c", "4" = "d",
  "5" = "e", "6" = "f", "7" = "g", "8" = "h"
)
startFen <<- "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"



=== File: ./R/find_index_of_square.R ===
find_index_of_square <- function(fen, square) {
  # the file_index_of_rank function takes the same inputs
  rank_index <- find_index_of_rank(fen, square)

  # extract rank from square
  rank <- as.numeric(substr(square, 2, 2))

  # extract positional field from FEN
  position <- strsplit(fen, " ")[[1]][1]

  # split positional field into ranks
  ranks <- strsplit(position, "/")[[1]]

  # ranks are descending left-to-right,
  # so the rank string must increment from 8 to 1
  rank_string <- ranks[9 - rank]

  # use the helper function to find the file index
  file_index <- find_index_within_rank(rank_string, square)

  # return the sum of rank and file index
  return(rank_index + file_index)
}

# print(paste(find_index_of_square("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", "c2"), "expect 29"))
# print(paste(find_index_of_square("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", "c7"), "expect 12"))



=== File: ./R/find_index_within_rank.R ===
find_index_within_rank <- function(rank_string, square) {
  # file letter will be first character of square
  file_letter <- tolower(substr(square, 1, 1))

  # convert file letter to file number
  target_file_number <- match(file_letter, letters)

  # initialize string and board indices at 0
  string_index <- 0
  board_index <- 0
  # split rank string into characters
  chars <- unlist(strsplit(rank_string, ""))

  # iterate through characters
  for (char in chars) {
    # string index increments by 1 whether character is a letter or a string
    string_index <- string_index + 1

    # if character is a number,
    if (grepl("[1-8]", char)) {
      # store it as spaces to indicate a count of empty spaces
      spaces <- as.numeric(char)
      # if empty spaces count exceeds or equals target file number,
      if (board_index + spaces >= target_file_number) {
        # then the square shares an index with the empty spaces
        return(string_index)
      }
      # otherwise continue incrementing board index
      board_index <- board_index + spaces
    } else { # if character is a letter
      # it contributes 1 character to the FEN index
      board_index <- board_index + 1
      # if this brings the board index to the same as the target file number,
      if (target_file_number == board_index) {
        # this is the string index
        return(string_index)
      }
    }
  }
  return(-1)
}

# test cases
# print(paste(find_index_within_rank("8", "c1"), "expect 1"))
# print(paste(find_index_within_rank("8", "c8"), "expect 1"))
# print(paste(find_index_within_rank("PPPP4", "c8"), "expect 3"))
# print(paste(find_index_within_rank("2P5", "c4"), "expect 2"))



=== File: ./R/fen_map.R ===
library(magrittr)
library(stringr)
source("R/globals.R")
source("R/char_transpose.R")

fen_map <- function(FEN, connections, chess_symbol = TRUE, validate = FALSE) {
  get_position <- function(file, rank) {
    paste0(letters[file], rank)
  }

  result <- c()
  sq_file <- 1
  sq_rank <- 8
  fen_length <- 0

  FEN_split <- strsplit(FEN, "")[[1]]

  position_symbol <- list()

  for (char in FEN_split) {
    fen_length <- fen_length + 1
    if (char == " ") {
      break
    } else if (grepl("[0-9]", char)) {
      sq_file <- sq_file + as.numeric(char)
    } else if (char == "/") {
      sq_file <- 1
      sq_rank <- sq_rank - 1
      result <- c(result, paste0("----- ", paste0(rep(" ", nchar(FEN)), collapse = "")))
    } else {
      if (chess_symbol && char %in% names(fen_to_symbol)) {
        char <- fen_to_symbol[[char]]
        char <- intToUtf8(utf8ToInt(char)[1])
      }
      pos <- get_position(sq_file, sq_rank)
      position_symbol[[pos]] <- char

      result_row <- paste0(char, "_", pos)
      result_row <- paste0(result_row, ":", paste0(rep(" ", fen_length), collapse = ""), char)
      to_add <- nchar(FEN) - nchar(result_row) + 6
      if (to_add > 0) {
        result_row <- paste0(result_row, paste0(rep(" ", to_add), collapse = ""))
      }
      result <- c(result, result_row)
      sq_file <- sq_file + 1
    }
  }

  for (conn in 1:nrow(connections)) {
    from_pos <- connections$source[conn]
    to_pos <- connections$target[conn]
    type <- connections$type[conn]

    from_index <- find_index_of_square(FEN, from_pos)
    to_index <- find_index_of_square(FEN, to_pos)

    if (type == "protection") {
      x <- min(from_index, to_index)
      y <- FEN %>%
        substr(start = 1, stop = max(from_index, to_index)) %>%
        gsub(pattern = "\\d", replacement = "") %>%
        nchar()

      result_row <- result[y]
      insert_pos <- x + 6
      result_row <- substr(result_row, 1, insert_pos - 1)
      result_row <- paste0(result_row, "└")
      result_row <- paste0(result_row, substr(result[y], insert_pos + 1, nchar(result[y])))
      result_row <- str_replace_all(result_row, "(?<=└) +(?=[^ ])", function(match) {
        gsub(" ", "─", match)
      })
      result[y] <- result_row
    } else if (type == "threat") {
      x <- max(from_index, to_index)
      y <- FEN %>%
        substr(start = 1, stop = min(from_index, to_index)) %>%
        gsub(pattern = "\\d", replacement = "") %>%
        nchar()

      result_row <- result[y]
      insert_pos <- x + 6
      result_row <- substr(result_row, 1, insert_pos - 1)
      result_row <- paste0(result_row, "┐")
      result_row <- paste0(result_row, substr(result[y], insert_pos + 1, nchar(result[y])))
      result_row <- str_replace_all(result_row, "(?<=[^ ]) +(?=┐)", function(match) {
        gsub(" ", "─", match)
      })
      result[y] <- result_row
    }
  }
  result <- char_transpose(result)
  result <- str_replace_all(result, "(?<=[♟♞♝♜♛♚♙♘♗♖♕♔]).+(?=└)", function(match) {
    gsub("[ ─]", "│", match)
  })
  result <- str_replace_all(result, "(?<=┐).+(?=[♟♞♝♜♛♚♙♘♗♖♕♔])", function(match) {
    gsub("[ ─]", "│", match)
  })
  result <- char_transpose(result)
  result <- c(
    paste0("FEN : ", FEN),
    result,
    paste0("FEN : ", FEN)
  )
  return(result)
}



=== File: ./R/find_index_of_rank.R ===
find_index_of_rank <- function(fen, square) {
  # rank will be 2nd character of square
  rank <- as.numeric(substr(square, 2, 2)) # 4

  # eighth rank always starts at index 0
  if (rank == 8) {
    return(0)
  }

  # positional field will be space-separated from other fields
  position <- strsplit(fen, " ")[[1]][1] # rnbqkbnr/pppppppp/8/8/2P5/8/PP1PPPPP/RNBQKBNR

  # ranks will be separated from each other by forward-slashes
  ranks <- strsplit(position, "/")[[1]] # c('rnbqkbnr', 'pppppppp', '8', '8', '2P5', '8', 'PP1PPPPP', 'RNBQKBNR')

  # ranks are depicted top-to-bottom from left to right
  left_ranks <- ranks[1:(8 - rank)] # c('rnbqkbnr', 'pppppppp', '8', '8')


  return(
    sum(sapply(left_ranks, nchar)) + # character length of ranks
      length(left_ranks) # separators '/'
  )
}

# test cases
# print(paste(find_index_of_rank("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", "c2"), "expect 26"))
# print(paste(find_index_of_rank("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", "c4"), "expect 22"))
# print(paste(find_index_of_rank("rnbqkbnr/pppppppp/8/8/2P5/8/PP1PPPPP/RNBQKBNR b KQkq - 0 1", "c4"), "expect 22")) # returns 24
# print(paste(find_index_of_rank("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", "c7"), "expect 9"))



=== File: ./R/fenMap.R ===
fenMap <- function(chess_data, connections) {
  x <- fen_map(chess_data$fen(), connections)
  for (l in x) {
    cat(l, "\n")
  }
}



=== File: ./R/getLinks.R ===
library(httr)

getLinks <- function(fen_string) {
  endpoint <- "/links/"
  url <- paste0(api_url, endpoint, "?fen_string=", URLencode(fen_string))

  tryCatch(
    {
      response <- GET(url)
      stop_for_status(response)
      return(content(response, "text"))
    },
    error = function(e) {
      message("Failed to fetch data: ", e$message)
      return(NULL)
    }
  )
}



=== File: ./R/remove_all_cycles.R ===
library(igraph)

# Enhanced function to remove all cycles
remove_all_cycles <- function(g) {
  scc <- components(g, mode = "strong")
  # Continue while there is any SCC with more than one node
  while (any(scc$csize > 1)) {
    for (i in which(scc$csize > 1)) {
      subg_nodes <- which(scc$membership == i)
      # Control variable for breaking out of nested loops
      should_break <- FALSE
      # Attempt to remove an edge from each node in the SCC
      for (node in subg_nodes) {
        out_neighbors <- neighbors(g, node, mode = "out")
        for (neighbor in out_neighbors) {
          if (neighbor %in% subg_nodes) {
            edge_to_remove <- get.edge.ids(g, c(node, neighbor), directed = TRUE)
            g <- delete_edges(g, edge_to_remove)
            should_break <- TRUE # Set the control variable to true
            break # Break the innermost loop
          }
        }
        if (should_break) break # Break the outer loop if the control variable is true
      }
    }
    scc <- components(g, mode = "strong") # Recompute SCCs after modifications
  }
  return(g)
}



=== File: ./app.R ===
library(shiny)
source("R/fen_map.R")
source("R/find_index_of_rank.R")
source("R/find_index_within_rank.R")
source("R/find_index_of_square.R")
source("chess_utils.R")
source("ui.R")
source("server.R")

api_url <- Sys.getenv("API_URL", "http://localhost:8000")

shinyApp(ui, server, options = list(port = 3838))



=== File: ./chess_utils.R ===
library(reticulate)

getLegalMovesSan <- function(fen) {
  source_python("chess_utils.py")
  moves <- get_legal_moves_san(fen)
  if (length(moves) == 0) {
    return(NULL)
  }
  moves
}

getMoveHistorySan <- function(move_history) {
  source_python("chess_utils.py")
  moves <- get_move_history_san(move_history)
  moves
}

getEdges <- function(board) {
  source_python("chess_utils.py")
  edges <- get_edges(board)
  edges
}

getNodes <- function(board) {
  source_python("chess_utils.py")
  nodes <- get_nodes(board)
  nodes
}



=== File: ./generate_data.R ===
generate_data <- function(expr, sd_Y, rho, n) {
  # Process the expression to ensure compatibility (not necessary if already in correct format)
  expr <- gsub("y\\s*=\\s*", "", expr, ignore.case = TRUE) # Remove 'y ='

  # Generate x values along the x axis
  x <- 1:n

  # Evaluate the expression with x to generate Y
  environment <- new.env()
  environment$x <- x
  Y <- eval(parse(text = expr), envir = environment)

  # Calculate the actual standard deviation of Y
  actual_sd_Y <- sd(Y)

  # Scale Y to have the desired standard deviation
  Y <- Y * (sd_Y / actual_sd_Y)

  # Adjust Y to have the desired correlation with x
  epsilon <- rnorm(n, mean = 0, sd = 1)
  Y <- rho * Y + sqrt(1 - rho^2) * epsilon * sd_Y

  # Scale the error component to maintain the desired standard deviation
  Y <- mean(Y) + (Y - mean(Y)) * (sd_Y / sd(Y))

  # Return a data frame with x and Y
  return(data.frame(x = x, Y = Y))
}

# Example usage
set.seed(123)
data <- generate_data("y = 3*x + 4", sd_Y = 0.5, rho = 0.75, n = 100)
print(cor(data$x, data$Y))
print(sd(data$Y))
print(head(data))



=== File: ./server.R ===
library(httr)
library(ggplot2)
library(reticulate)
library(magrittr)
library(yaml)
library(igraph)
library(DT)
source("chess_utils.R")
source("R/renderAsciiSummary.R")
source("R/globals.R")
source("R/fenMap.R")
source("R/fen_description.R")
source("R/populateFEN.R")
source("R/asciiPrint.R")
source("R/asciiSub.R")
source("R/sendLinksToGraphDAG.R")
source("R/move_history_tracker.R")

server <- function(input, output, session) {
  py_chess <- import("chess")
  chess <- py_chess$Board()
  lichess_state <- chess

  track_move_history(chess)
  moveHistory <- reactiveVal(NULL)
  asciiBoard <- reactiveVal()
  helperVisual <- reactiveVal()
  links <- reactiveVal()
  fenDescription <- reactiveVal()

  server_down_message <- readLines("server-down.txt", warn = FALSE)

  links_data <- list()
  connections <- NULL

  updateChessDependencies <- function() {
    asciiBoard(capture.output(renderAsciiSummary(chess)))

    links_list <- getEdges(chess)
    links_data$edges <- do.call(rbind.data.frame, lapply(links_list, as.data.frame))
    connections <<- links_data$edges

    links(links_data)

    helperVisual(capture.output(fenMap(chess, connections)))
    fenDescription(fen_description(chess$fen(), verbose_ranks = TRUE) %>% as.yaml())

    current_history <- track_move_history(chess)
    moveHistory(current_history)

    updateAvailableMoves()
  }

  updateAvailableMoves <- function() {
    availableMoves <- getLegalMovesSan(chess$fen()) %>% sort()
    updateSelectInput(session, "selectedMove", choices = c("", availableMoves))
  }

  updateAvailableMoves()
  updateChessDependencies()

  observeEvent(input$selectedFEN, {
    updateTextInput(session, "fen", value = populateFEN(input$selectedFEN))
  })

  observeEvent(input$submitFEN, {
    fen_result <- tryCatch(
      {
        chess$set_fen(input$fen)
        reset_move_history(input$fen)
        TRUE
      },
      error = function(e) {
        FALSE
      }
    )

    if (!fen_result) {
      showNotification("Invalid FEN. Please try again.")
    } else {
      if (input$selectedFEN == "lichess daily puzzle") {
        chess <<- lichess_state
      }
      updateChessDependencies()
    }
  })

  observeEvent(input$submitMove, {
    move_result <- tryCatch(
      {
        chess$push_san(input$move)
        current_history <- track_move_history(chess, input$move)
        moveHistory(current_history)
        TRUE
      },
      error = function(e) {
        FALSE
      }
    )

    if (!move_result) {
      showNotification("Invalid move. Please try again.")
    } else {
      updateChessDependencies()
    }
  })

  observeEvent(input$undo, {
    if (length(chess$move_stack) > 0) {
      chess$pop()
      current_history <- undo_move_history()
      moveHistory(current_history)
      updateChessDependencies()
    }
  })

  observeEvent(input$selectedMove, {
    updateTextInput(session, "move", value = input$selectedMove)
  })

  output$board <- renderText({
    asciiBoard() %>%
      paste(collapse = "\n") %>%
      gsub(pattern = "\\.", replacement = " ")
  })

  output$dynamicOutput <- renderUI({
    if (input$selectedVisual %in% c("History Table", "Plot View")) {
      if (input$selectedVisual == "History Table") {
        dataTableOutput("tableView")
      } else if (input$selectedVisual == "Plot View") {
        plotOutput("plotView")
      }
    } else {
      verbatimTextOutput("textHelper")
    }
  })

  output$textHelper <- renderText({
    switch(input$selectedVisual,
      "Diagon Links" = {
        links_data <- links()
        if (identical(links_data, server_down_message)) {
          paste(server_down_message, collapse = "\n")
        } else {
          graphdag_response <- sendLinksToGraphDAG(links_data)
          ascii_art <- paste(unlist(strsplit(graphdag_response[[1]], "\n")), collapse = "\n")
          if (!is.null(ascii_art) && nzchar(ascii_art)) {
            ascii_art
          } else {
            "No ASCII graph returned from the /graphdag endpoint."
          }
        }
      },
      "Link List" = {
        links_data <- links()
        if (identical(links_data, server_down_message)) {
          paste(server_down_message, collapse = "\n")
        } else {
          graph_text <- paste(paste(links_data$edges$source, links_data$edges$target, sep = "->"), collapse = "\n")
          graph_text
        }
      },
      "FEN map" = {
        paste(helperVisual(), collapse = "\n")
      },
      "FEN description" = {
        fenDescription()
      },
      "Move History" = {
        move_history_df <- track_move_history()
        if (!is.null(move_history_df)) {
          capture.output(print(move_history_df)) %>% paste(collapse = "\n")
        } else {
          "No moves recorded yet."
        }
      },
      "Select Helper Visual"
    )
  })

  output$tableView <- DT::renderDT({
    history <- moveHistory()

    if (!is.null(history)) {
      DT::datatable(
        history,
        options = list(
          pageLength = 10,
          order = list(list(0, "desc")),
          scrollX = TRUE
        ),
        rownames = FALSE
      )
    }
  })
  output$plotView <- renderPlot({
    links_data <- links()

    if (identical(links_data, server_down_message) || is.null(links_data) || nrow(links_data$edges) == 0) {
      return(NULL)
    }

    edge_df <- links_data$edges[, c("source", "target", "type")]

    edge_colors <- ifelse(edge_df$type == "threat", "red", "green")

    g <- graph_from_data_frame(d = edge_df, directed = TRUE)

    V(g)$color <- rep("lightblue", vcount(g))

    E(g)$color <- edge_colors
    E(g)$arrow.size <- 0.5
    plot(g,
      layout = layout_on_grid(g), # layout_as_star layout_in_circle layout_nicely layout_on_grid layout_on_sphere layout_randomly layout_with_fr layout.auto layout.grid.3d layout.svd
      edge.arrow.size = 0.5,
      vertex.label.color = "black",
      vertex.label.cex = 0.8,
      vertex.size = 25,
      main = "Chess Position Graph",
      sub = paste("Turn:", ifelse(chess$turn, "White", "Black"))
    )
  })
}



=== File: ./chess_utils.py ===
import chess

def get_legal_moves_san(fen):
    board = chess.Board(fen)
    legal_moves = list(board.legal_moves)
    san_moves = [board.san(move) for move in legal_moves]
    return san_moves

def get_move_history_san(move_history):
    """Converts a list of UCI moves into a list of SAN moves.

    Args:
        move_history: A list of strings representing moves in UCI notation,
                      or a list of chess.Move objects.

    Returns:
        A list of strings representing the moves in SAN notation.
    """
    tracking_board = chess.Board()
    san_moves = []
    for move in move_history:
        if isinstance(move, str):
            move = chess.Move.from_uci(move)
        elif not isinstance(move, chess.Move):
            raise ValueError("Invalid move type. Moves must be UCI strings or chess.Move objects.")
        san_move = tracking_board.san(move)
        san_moves.append(san_move)
        tracking_board.push(move)
    return san_moves

def get_edges(board):
    edges = []
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            attackers = board.attackers(not piece.color, square)
            defenders = board.attackers(piece.color, square)

            for attacker_square in attackers:
                edges.append({
                    "type": "threat",
                    "source": chess.square_name(attacker_square),
                    "target": chess.square_name(square)
                })

            for defender_square in defenders:
                edges.append({
                    "type": "protection",
                    "source": chess.square_name(defender_square),
                    "target": chess.square_name(square)
                })
    return edges


def get_nodes(board):
    nodes = []
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            nodes.append({
                "square": chess.square_name(square),
                "piece_type": piece.symbol(),
                "color": "white" if piece.color else "black"
            })
    return nodes




=== File: ./R/get_formatted_moves.py ===
def get_formatted_moves(board):
    # Create a list to store move strings
    move_strings = [str(move) for move in board.legal_moves]
    return move_strings




